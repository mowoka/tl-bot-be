// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"d
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
  // for production uncomment down below
  // url               = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// sector model
model sector {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  sector_code String @unique
  name        String
}

// team lead user model
model user {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  nik        String @unique
  name       String
  idTelegram String @unique
  partner    String
  sector     String
  witel      String
  regional   String
  password   String
}

// teknisi user model
model user_teknisi {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  nik        String @unique
  name       String
  idTelegram String @unique
  partner    String
  sector     String
  witel      String
  regional   String

  lapor_langsung   lapor_langsung[]
  tutup_odp        tutup_odp[]
  ticket_regular   ticket_regular[]
  ticket_sqm       ticket_sqm[]
  proman           proman[]
  unspect          unspect[]
  valins           valins[]
  ticket_team_lead ticket_team_lead[]
  ticket_redundant ticket_redundant[]
}

// team leader job model
model team_lead_job {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  name             String             @unique
  point            Float
  ticket_team_lead ticket_team_lead[]
}

// teknisi job model
model teknisi_job {
  id       String   @id @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  name             String             @unique
  point            Float
  lapor_langsung   lapor_langsung[]
  tutup_odp        tutup_odp[]
  ticket_regular   ticket_regular[]
  ticket_sqm       ticket_sqm[]
  proman           proman[]
  unspect          unspect[]
  valins           valins[]
  ticket_redundant ticket_redundant[]

  @@map("teknisi_job")
}

// model Lapor Langsung
model lapor_langsung {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  speedy_number  String
  customer_phone String
  customer_name  String
  problem        String
  description    String

  teknisi_job_id String
  job            teknisi_job @relation(fields: [teknisi_job_id], references: [id])

  idTelegram            String
  teknisi_user_telegram user_teknisi @relation(fields: [idTelegram], references: [idTelegram])

  @@map("lapor_langsung")
}

// tutup odp
model tutup_odp {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  odp_name    String
  odp_address String

  teknisi_job_id String
  job            teknisi_job @relation(fields: [teknisi_job_id], references: [id])

  idTelegram            String
  teknisi_user_telegram user_teknisi @relation(fields: [idTelegram], references: [idTelegram])

  @@map("tutup_odp")
}

// ticket_regular
model ticket_regular {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  insiden_number  String
  speedy_number   String @unique
  customer_name   String
  customer_number String
  problem         String
  description     String

  teknisi_job_id String
  job            teknisi_job @relation(fields: [teknisi_job_id], references: [id])

  idTelegram            String
  teknisi_user_telegram user_teknisi @relation(fields: [idTelegram], references: [idTelegram])

  @@map("ticket_regular")
}

// SQM
model ticket_sqm {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  insiden_number  String
  speedy_number   String @unique
  customer_name   String
  customer_number String
  problem         String
  description     String

  teknisi_job_id String
  job            teknisi_job @relation(fields: [teknisi_job_id], references: [id])

  idTelegram            String
  teknisi_user_telegram user_teknisi @relation(fields: [idTelegram], references: [idTelegram])

  @@map("ticket_sqm")
}

// Proman
model proman {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  odp_name              String
  distribusi            String
  capacity_port         Int
  status_port_use       Int
  status_port_available Int
  odp_cradle            Int
  opm_length            Int

  teknisi_job_id String
  job            teknisi_job @relation(fields: [teknisi_job_id], references: [id])

  idTelegram            String
  teknisi_user_telegram user_teknisi @relation(fields: [idTelegram], references: [idTelegram])

  @@map("proman")
}

// Unspect
model unspect {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  speedy_number String
  odp           String
  problem       String
  description   String

  teknisi_job_id String
  job            teknisi_job @relation(fields: [teknisi_job_id], references: [id])

  idTelegram            String
  teknisi_user_telegram user_teknisi @relation(fields: [idTelegram], references: [idTelegram])

  @@map("unspect")
}

// Valins
model valins {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  valins_id String
  odp       String

  teknisi_job_id String
  job            teknisi_job @relation(fields: [teknisi_job_id], references: [id])

  idTelegram            String
  teknisi_user_telegram user_teknisi @relation(fields: [idTelegram], references: [idTelegram])

  @@map("valins")
}

// TL ticket input
model ticket_team_lead {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  description String

  teknisi_user_id Int
  teknisi         user_teknisi @relation(fields: [teknisi_user_id], references: [id])

  team_lead_job_id Int
  job              team_lead_job @relation(fields: [team_lead_job_id], references: [id])
}

// model for note ticket regul
model ticket_redundant {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  insiden_number String
  speedy_number  String
  customer_name  String
  problem        String
  description    String
  minus_point    Int

  job_id String
  job    teknisi_job @relation(fields: [job_id], references: [id])

  idTelegram            String
  teknisi_user_telegram user_teknisi @relation(fields: [idTelegram], references: [idTelegram])
}
